#include "definitions.h"

const BYTE INIT = 0;
const BYTE REFI = 1;
const BYTE POLY = 2;
const BYTE REFO = 3;
const BYTE XORO = 4;
const BYTE MASK = 5;
const BYTE WIDT = 6;

QWORD ARGUMENT[][7] = {
	{0x0000000000000000, 1, 0x0000000000000003, 1, 0x0000000000000000, 0x000000000000000F,  4},
	{0x0000000000000009, 0, 0x0000000000000009, 0, 0x0000000000000000, 0x000000000000001F,  5},
	{0x0000000000000000, 1, 0x0000000000000015, 1, 0x0000000000000000, 0x000000000000001F,  5},
	{0x000000000000001F, 1, 0x0000000000000005, 1, 0x000000000000001F, 0x000000000000001F,  5},
	{0x0000000000000000, 1, 0x0000000000000003, 1, 0x0000000000000000, 0x000000000000003F,  6},
	{0x0000000000000000, 0, 0x0000000000000009, 0, 0x0000000000000000, 0x000000000000007F,  7},
	{0x0000000000000000, 0, 0x0000000000000007, 0, 0x0000000000000000, 0x00000000000000FF,  8},
	{0x0000000000000000, 0, 0x0000000000000007, 0, 0x0000000000000055, 0x00000000000000FF,  8},
	{0x00000000000000FF, 1, 0x0000000000000007, 1, 0x0000000000000000, 0x00000000000000FF,  8},
	{0x0000000000000000, 1, 0x0000000000000031, 1, 0x0000000000000000, 0x00000000000000FF,  8},
	{0x0000000000000000, 1, 0x0000000000008005, 1, 0x0000000000000000, 0x000000000000FFFF, 16},
	{0x0000000000000000, 1, 0x0000000000008005, 1, 0x000000000000FFFF, 0x000000000000FFFF, 16},
	{0x000000000000FFFF, 1, 0x0000000000008005, 1, 0x000000000000FFFF, 0x000000000000FFFF, 16},
	{0x000000000000FFFF, 1, 0x0000000000008005, 1, 0x0000000000000000, 0x000000000000FFFF, 16},
	{0x0000000000000000, 1, 0x0000000000001021, 1, 0x0000000000000000, 0x000000000000FFFF, 16},
	{0x000000000000FFFF, 0, 0x0000000000001021, 0, 0x0000000000000000, 0x000000000000FFFF, 16},
	{0x000000000000FFFF, 1, 0x0000000000001021, 1, 0x000000000000FFFF, 0x000000000000FFFF, 16},
	{0x0000000000000000, 0, 0x0000000000001021, 0, 0x0000000000000000, 0x000000000000FFFF, 16},
	{0x0000000000000000, 1, 0x0000000000008408, 1, 0x0000000000000000, 0x000000000000FFFF, 16},
	{0x0000000000000000, 1, 0x0000000000003D65, 1, 0x000000000000FFFF, 0x000000000000FFFF, 16},
	{0x00000000FFFFFFFF, 1, 0x0000000004C11DB7, 1, 0x00000000FFFFFFFF, 0x00000000FFFFFFFF, 32},
	{0x00000000FFFFFFFF, 1, 0x000000001EDC6F41, 1, 0x00000000FFFFFFFF, 0x00000000FFFFFFFF, 32},
	{0x00000000FFFFFFFF, 1, 0x00000000741B8CD7, 1, 0x00000000FFFFFFFF, 0x00000000FFFFFFFF, 32},
	{0x00000000FFFFFFFF, 0, 0x0000000004C11DB7, 0, 0x0000000000000000, 0x00000000FFFFFFFF, 32},
	{0xFFFFFFFFFFFFFFFF, 0, 0x42F0E1EBA9EA3693, 0, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 64},
	{0xFFFFFFFFFFFFFFFF, 1, 0x000000000000001B, 1, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 64},
	{0xFFFFFFFFFFFFFFFF, 1, 0x42F0E1EBA9EA3693, 1, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 64}
};

BYTE REF(BYTE x)
{
	BYTE y = 0;
	for (int i = 0; i < 8; i++)
	{
		y <<= 1;
		y |= x & 1;
		x >>= 1;
	}
	return y;
}
Cryptography::CRC::CRC(BYTE algorithm): type(algorithm), crc(ARGUMENT[algorithm][INIT])
{
}
void Cryptography::CRC::update(const void *b, QWORD length)
{
	const char *buf = (const char *) b;
	for (QWORD i = 0; i < length; i++)
	{
		BYTE x = ARGUMENT[this->type][REFI] ? REF(buf[i]) : buf[i];
		for (int j = 8; j--;)
		{
			bool div = (this->crc >> (ARGUMENT[this->type][WIDT] - 1)) ^ ((x >> j) & 1);
			this->crc <<= 1;
			if (div)
			{
				this->crc ^= ARGUMENT[this->type][POLY];
			}
			this->crc &= ARGUMENT[this->type][MASK];
		}
	}
}
QWORD Cryptography::CRC::value() const
{
	QWORD res = this->crc;
	if (ARGUMENT[this->type][REFO])
	{
		QWORD temp = 0;
		for (BYTE i = ARGUMENT[this->type][WIDT]; i--;)
		{
			temp <<= 1;
			temp |= res & 1;
			res >>= 1;
		}
		res = temp;
	}
	return (res ^ ARGUMENT[this->type][XORO]) & ARGUMENT[this->type][MASK];
}